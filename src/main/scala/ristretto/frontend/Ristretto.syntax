module ristretto.frontend.Ristretto;

header {
  import ristretto.frontend.RistrettoSyntax.*;
}

body {
}

Root
  = Spacing Def+ EOF
  .

Def {line}
  = FunDef
  | ExternDef
  .

FunDef : Def
  = TyTreeOrVoid Name '(' Param ** "," ')' Block
  .

ExternDef : Def
  = "extern" TyTreeOrVoid Name '(' Param ** "," ')' ";"
  .

TyTree
  = TyTree '[' ']'                  {ArrayTyTree, 1}
  | BaseTyTree
  .

TyTreeOrVoid : TyTree
  = TyTree
  | "void" {VoidTyTree}
  .

BaseTyTree : TyTree
  = "int"                         {IntTyTree}
  | "boolean"                     {BooleanTyTree}
  .

Param
  = TyTree Name
  .

Exp {paren}
  = Exp "||" Exp            {Or, left, 7}
  | Exp "&&" Exp            {And, left, 6}
  | Exp "==" Exp            {Eq, left, 5}
  | Exp "!=" Exp            {Ne, left, 5}
  | Exp "<" Exp             {Lt, left, 4}
  | Exp "<=" Exp            {Le, left, 4}
  | Exp ">" Exp             {Gt, left, 4}
  | Exp ">=" Exp            {Ge, left, 4}
  | Exp "+" Exp             {Add, left, 3}
  | Exp "-" Exp             {Sub, left, 3}
  | Exp "*" Exp             {Mul, left, 2}
  | Exp "/" Exp             {Div, left, 2}
  | Exp "%" Exp             {Mod, left, 2}
  | '-' Primary                 {Neg, 1}
  | '!' Primary                 {Not, 1}
  | "new" TyTree ( '[' Exp ']' )+ {NewArray}
  | Primary
  .

Primary : Exp
  = PrimaryNoArray ( '[' Exp ']' )+ {ArrayGet, 1}
  | Primary '.' "length" {ArrayLength, 1}
  | PrimaryNoArray
  .

PrimaryNoArray : Exp
  = '{' Exp ++ "," '}' {ArrayLit}
  | '(' Exp ')'
  | StringLiteral {StringLit}
  | IntLiteral {IntLit, 1: Long.parseLong : Long}
  | "true" {True}
  | "false" {False}
  | Call
  | Name {Var}
  .

Call : Exp
  = Name '(' Exp ** "," ')'
  .

Block : Stm
  = '{' nest(Stm*) \n '}'
  .

Stm
  = "if" '(' Exp ')' nest(Stm) "else" nest(Stm)  {IfElse}
  | "if" '(' Exp ')' nest(Stm) {IfThen}
  | "while" '(' Exp ')' nest(Stm) {While}
  | "return" Exp? ';' {Return}
  | Block
  | Call ';' {CallStm}
  | Name sp "=" Exp ';' {Assign}
  | TyTree Name "=" Exp ';' {VarDefStm}
  | Primary ( '[' Exp ']' )+ sp "=" Exp ';' {ArrayAssign}
  .

Name
  = Identifier
  .

IntLiteral : String
  = Digits
  .

Digits : String
  = [0-9]+
  .

Digit : String
  = [0-9]
  .

StringLiteral : String
  = ["] (Escape / !["\\] _)* ["]
  .

Escape        : String = '\\' [btnfr"'\[\\\]] / '\\' [u] HexQuad / OctalEscape.
OctalEscape   : String = '\\' ([0-3] OctDigit OctDigit / OctDigit OctDigit / OctDigit).

HexQuad       : String = HexDigit HexDigit HexDigit HexDigit.
HexDigit      : String = [0-9a-fA-F].
OctDigit      : String = [0-7].
